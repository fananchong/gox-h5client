/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.CMD_MGR', null, global);
goog.exportSymbol('proto.proto.MSG_MGR_LOSE_SERVER', null, global);
goog.exportSymbol('proto.proto.MSG_MGR_REGISTER_SERVER', null, global);
goog.exportSymbol('proto.proto.SERVER_INFO', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SERVER_INFO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SERVER_INFO.repeatedFields_, null);
};
goog.inherits(proto.proto.SERVER_INFO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.SERVER_INFO.displayName = 'proto.proto.SERVER_INFO';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SERVER_INFO.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SERVER_INFO.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SERVER_INFO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SERVER_INFO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SERVER_INFO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addrsList: jspb.Message.getRepeatedField(msg, 2),
    portsList: jspb.Message.getRepeatedField(msg, 3),
    overloadList: jspb.Message.getRepeatedField(msg, 4),
    version: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SERVER_INFO}
 */
proto.proto.SERVER_INFO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SERVER_INFO;
  return proto.proto.SERVER_INFO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SERVER_INFO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SERVER_INFO}
 */
proto.proto.SERVER_INFO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddrs(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setPortsList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setOverloadList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SERVER_INFO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SERVER_INFO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SERVER_INFO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SERVER_INFO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getOverloadList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 Id = 1;
 * @return {number}
 */
proto.proto.SERVER_INFO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.SERVER_INFO.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string Addrs = 2;
 * @return {!Array.<string>}
 */
proto.proto.SERVER_INFO.prototype.getAddrsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.proto.SERVER_INFO.prototype.setAddrsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.SERVER_INFO.prototype.addAddrs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.SERVER_INFO.prototype.clearAddrsList = function() {
  this.setAddrsList([]);
};


/**
 * repeated uint32 Ports = 3;
 * @return {!Array.<number>}
 */
proto.proto.SERVER_INFO.prototype.getPortsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.proto.SERVER_INFO.prototype.setPortsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.SERVER_INFO.prototype.addPorts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.proto.SERVER_INFO.prototype.clearPortsList = function() {
  this.setPortsList([]);
};


/**
 * repeated uint32 Overload = 4;
 * @return {!Array.<number>}
 */
proto.proto.SERVER_INFO.prototype.getOverloadList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.proto.SERVER_INFO.prototype.setOverloadList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.SERVER_INFO.prototype.addOverload = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.proto.SERVER_INFO.prototype.clearOverloadList = function() {
  this.setOverloadList([]);
};


/**
 * optional string Version = 5;
 * @return {string}
 */
proto.proto.SERVER_INFO.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.SERVER_INFO.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MSG_MGR_REGISTER_SERVER = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MSG_MGR_REGISTER_SERVER, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.MSG_MGR_REGISTER_SERVER.displayName = 'proto.proto.MSG_MGR_REGISTER_SERVER';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MSG_MGR_REGISTER_SERVER.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MSG_MGR_REGISTER_SERVER} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MSG_MGR_REGISTER_SERVER.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.proto.SERVER_INFO.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MSG_MGR_REGISTER_SERVER}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MSG_MGR_REGISTER_SERVER;
  return proto.proto.MSG_MGR_REGISTER_SERVER.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MSG_MGR_REGISTER_SERVER} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MSG_MGR_REGISTER_SERVER}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.SERVER_INFO;
      reader.readMessage(value,proto.proto.SERVER_INFO.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MSG_MGR_REGISTER_SERVER.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MSG_MGR_REGISTER_SERVER} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MSG_MGR_REGISTER_SERVER.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.SERVER_INFO.serializeBinaryToWriter
    );
  }
};


/**
 * optional SERVER_INFO Data = 1;
 * @return {?proto.proto.SERVER_INFO}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.prototype.getData = function() {
  return /** @type{?proto.proto.SERVER_INFO} */ (
    jspb.Message.getWrapperField(this, proto.proto.SERVER_INFO, 1));
};


/** @param {?proto.proto.SERVER_INFO|undefined} value */
proto.proto.MSG_MGR_REGISTER_SERVER.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.MSG_MGR_REGISTER_SERVER.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.MSG_MGR_REGISTER_SERVER.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MSG_MGR_LOSE_SERVER = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MSG_MGR_LOSE_SERVER, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.MSG_MGR_LOSE_SERVER.displayName = 'proto.proto.MSG_MGR_LOSE_SERVER';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MSG_MGR_LOSE_SERVER.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MSG_MGR_LOSE_SERVER.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MSG_MGR_LOSE_SERVER} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MSG_MGR_LOSE_SERVER.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MSG_MGR_LOSE_SERVER}
 */
proto.proto.MSG_MGR_LOSE_SERVER.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MSG_MGR_LOSE_SERVER;
  return proto.proto.MSG_MGR_LOSE_SERVER.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MSG_MGR_LOSE_SERVER} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MSG_MGR_LOSE_SERVER}
 */
proto.proto.MSG_MGR_LOSE_SERVER.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MSG_MGR_LOSE_SERVER.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MSG_MGR_LOSE_SERVER.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MSG_MGR_LOSE_SERVER} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MSG_MGR_LOSE_SERVER.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Id = 1;
 * @return {number}
 */
proto.proto.MSG_MGR_LOSE_SERVER.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.MSG_MGR_LOSE_SERVER.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.proto.CMD_MGR = {
  PING: 0,
  REGISTER_SERVER: 1,
  LOSE_SERVER: 2
};

goog.object.extend(exports, proto.proto);
